
CC = gcc
CFLAGS = -O2 -flto -g -Wall -Werror -pipe
LDFLAGS = -O2 -flto

rule cc
    depfile = $out.d
    command = $CC -std=gnu89 -MD -MF $out.d $CFLAGS -c -o $out $in

rule link
    command = $CC $LDFLAGS -o $out $in $libs

rule run
     command = ./$in $args

rule valgrind
     command = valgrind --leak-check=full --track-fds=yes --show-reachable=yes -v --log-file=$out ./$in $args

build test_inodecache: link test_inodecache.o inodecache.o md5.o compiler_properties.o

build bench_inodecache: link bench_inodecache.o  bench_stats.o inodecache.o md5.o compiler_properties.o mkdir_p.o
    libs = -lm

build md5.o: cc md5.c
build inodecache.o: cc inodecache.c
build mkdir_p.o: cc mkdir_p.c
build compiler_properties.o: cc compiler_properties.c
build bench_stats.o: cc bench_stats.c
build test_inodecache.o: cc test_inodecache.c
build bench_inodecache.o: cc bench_inodecache.c


build always: phony

build bench_inodecache.vglog: valgrind ./bench_inodecache | bench_inodecache always
    args = -c ./.inocache /usr/bin/gcc

build valgrind: phony bench_inodecache.vglog

build bench: run bench_inodecache | always
    args = -c ./.inocache /usr/bin/gcc

build barrier_test: link barrier_test.o barrier.o
build barrier_interproc_test: link barrier_interproc_test.o barrier.o
build barrier.o: cc barrier.c
build barrier_test.o: cc barrier_test.c
build barrier_interproc_test.o: cc barrier_interproc_test.c

default bench_inodecache test_inodecache barrier_test barrier_interproc_test
